// You can edit this code!
// Click here and start typing.

Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.



// You can edit this code!
// Click here and start typing.
package main

import "fmt"

func removeDuplicates(nums []int) int {

	var mine map[int]int = make(map[int]int)

	count := 0
	for i := 0; i < len(nums); i++ {

		if mine[nums[i]] < 2 {

			mine[nums[i]] = mine[nums[i]] + 1
			count++

		}

	}
	return count
}

func main() {

	nums := []int{1, 1, 1, 2, 2, 3}

	value := removeDuplicates(nums)
	fmt.Println(value)

}


// Process 



nums := []int{1, 1, 1, 2, 2, 3}

i = 0

0 < 2

myMap[nums[i]] = myMap[nums[i]] + 1

     value 0        = 0+1

now myMap[nums[i]] value =1 
map[1:1]


count = 1


i=1


myMap[nums[i]] = myMap[nums[i]] + 1
     
value 1        = value 1+1

map[1:2]

count = 2



i =2
  
map[1:2]
 
condition false becz i =2 which is 
1 key is alredy exist value is 2
           
if myMap[nums[i]] < 2 
        value     2        condition false



i =3

if myMap[nums[i]] < 2 { //  key 2 value 0 
   checking the value 0 here
   condition true

myMap[nums[i]] = myMap[nums[i]] + 1
        0     = 0+1
  myMap[2:1]

i = 4

 myMap[2:1]

  myMap[nums[i]] < 2
             1  conditiin true

  myMap[nums[i]] = myMap[nums[i]] + 1

  myMap[2:1]


i =5
  

 myMap[nums[i]] < 2
             0  conditiin true

  myMap[nums[i]] = myMap[nums[i]] + 1
         0       = 0+1

  myMap[3:1]


ans: map[1:2]





