package main

import "fmt"

type node struct {
	data string
	next *node
}

type singlyLinkedList struct {
	len  int
	head *node
}

func initList() *singlyLinkedList {
	return &singlyLinkedList{}
}

func (s *singlyLinkedList) AddFront(data string) {

	node := &node{data: data}

	if s.head == nil {
		s.head = node

	} else {
		node.next = s.head
		s.head = node
	}

	s.len++
	return
}

func (s *singlyLinkedList) Size() int {

	fmt.Println(s.len)

	return s.len
}

func (s *singlyLinkedList) Traverse() error {

	if s.head == nil {

		return fmt.Errorf("TraverseError: List is empty")
	}

	current := s.head

	for current != nil {

		fmt.Println(current.data)

		current = current.next
	}
	return nil
}

func (s *singlyLinkedList) Toarray() []string {

	var myarr []string

	current := s.head

	for current != nil {

		//fmt.Printf("Adding element in to array %s", current.data)

		myarr = append(myarr, current.data)

		current = current.next
	}

	return myarr
}

func main() {

	var vj singlyLinkedList

	vj.AddFront("Raj")
	vj.AddFront("Vijay")
	vj.AddFront("malar")
	vj.AddFront("Diya")
	vj.Size()
	k := vj.Traverse()

	if k != nil {
		fmt.Println(k)
	}

	a := vj.Toarray()
	fmt.Println("array is :", a)
}
